Here’s a set of basic shell scripting questions that cover a wide range of fundamental Linux commands. These questions are designed to help you practice and reinforce your understanding of common commands and their usage in scripts.

### **File and Directory Management**

1. **Create and List Directories**:
   - Write a script that creates a directory named `backup` in the current directory if it doesn’t already exist. Then, list all the directories in the current working directory.

   - **Commands covered**: `mkdir`, `ls`, `test`

    #!/bin/bash

    # Get the current working directory
    present_dir=$(pwd)
    echo "Current working directory: $present_dir"

    # Set the directory name to 'backup'
    dir_nm="backup"

    # Check if the directory already exists
    if [ ! -d "$dir_nm" ]; then
        # If it doesn't exist, create the directory
        mkdir "$dir_nm"
        echo "Directory '$dir_nm' created."
    else
        echo "Directory '$dir_nm' already exists."
    fi

    # List all directories in the current working directory
    echo "Listing all directories in $present_dir:"
    ls -d */

    echo "End of script"


2. **File Creation and Permissions**:
   - Write a script that creates an empty file named `notes.txt`, changes its permissions to make it readable and writable only by the owner, and then verifies the permissions.

   - **Commands covered**: `touch`, `chmod`, `ls -l`
  ans #!/bin/bash

      # Change to the desired directory
      cd /home/ec2-user || { echo "Failed to change directory"; exit 1; }

      # Create an empty file named 'notes.txt'
      touch notes.txt

      # Change the file's permissions to be readable and writable only by the owner
      chmod 600 notes.txt

      # Verify the file's permissions
      echo "Verifying permissions for notes.txt:"
      ls -l notes.txt
      echo "Script execution completed."

3. **Copy, Move, and Rename Files**:
   - Write a script that copies a file named `source.txt` to `destination.txt`. Then, move `destination.txt` to the `backup` directory created earlier and rename it to `backup.txt`.

   - **Commands covered**: `cp`, `mv`, `rename`

#!/bin/bash

# Define the source and destination filenames
source_file="source.txt"
destination_file="destination.txt"
backup_dir="backup"
backup_file="backup.txt"

# Ensure source.txt exists
if [ ! -f "$source_file" ]; then
    echo "Error: $source_file does not exist."
    exit 1
fi

# Copy source.txt to destination.txt
cp "$source_file" "$destination_file"
echo "$source_file copied to $destination_file."

# Ensure the backup directory exists
if [ ! -d "$backup_dir" ]; then
    echo "Backup directory $backup_dir does not exist, creating it now."
    mkdir "$backup_dir"
fi

# Move and rename destination.txt to the backup directory as backup.txt
mv "$destination_file" "$backup_dir/$backup_file"
echo "$destination_file moved to $backup_dir and renamed to $backup_file."

echo "Script completed successfully."




4. **Delete Files and Directories**:
   - Write a script that deletes all files in the current directory that end with `.log`. Then, delete the `backup` directory created earlier if it is empty.

   - **Commands covered**: `rm`, `rmdir`
#!/bin/bash

# Delete all .log files in the current directory
echo "Deleting .log files in the current directory..."
rm -f *.log

# Check if the backup directory exists
if [ -d "backup" ]; then
  echo "Checking if the backup directory is empty..."

  # Delete the backup directory if it is empty
  if [ -z "$(ls -A backup)" ]; then
    echo "Backup directory is empty. Deleting the directory..."
    rmdir backup
  else
    echo "Backup directory is not empty. It will not be deleted."
  fi
else
  echo "Backup directory does not exist."
fi

echo "Script completed."


### **Text Processing**

5. **Basic Text Search**:
   - Write a script that searches for the word "error" in a file named `system.log` and displays all matching lines.

   - **Commands covered**: `grep`

#!/bin/bash

# Check if the file system.log exists
if [ ! -f "system.log" ]; then
  echo "Error: system.log file not found!"
  exit 1
fi

# Search for the word "error" in the system.log file (case-insensitive)
echo "Searching for the word 'error' in system.log..."
grep -i "error" system.log

# Check if grep found any matches
if [ $? -ne 0 ]; then
  echo "No 'error' found in system.log."
fi

echo "Search completed."



6. **Count Lines, Words, and Characters**:
   - Write a script that counts the number of lines, words, and characters in a file named `notes.txt`.

   - **Commands covered**: `wc`

#!/bin/bash

# Check if the file notes.txt exists
if [ ! -f "notes.txt" ]; then
  echo "Error: notes.txt file not found!"
  exit 1
fi

# Count the number of lines, words, and characters in notes.txt
echo "Counting lines, words, and characters in notes.txt..."

lines=$(wc -l < notes.txt)
words=$(wc -w < notes.txt)
characters=$(wc -m < notes.txt)

# Display the results
echo "Lines: $lines"
echo "Words: $words"
echo "Characters: $characters"

echo "Count completed."




7. **Sorting and Uniqueness**:
   - Write a script that sorts the contents of a file named `items.txt` alphabetically and removes any duplicate lines. Save the result to a new file named `unique_items.txt`.

   - **Commands covered**: `sort`, `uniq`

8. **Text Replacement**:
   - Write a script that replaces all occurrences of the word "foo" with "bar" in a file named `data.txt` and saves the result to `new_data.txt`.

   - **Commands covered**: `sed`

### **File Permissions and Ownership**

9. **Change File Ownership**:
   - Write a script that changes the owner of a file named `project.txt` to a user named `user123`. Then, verify the change.

   - **Commands covered**: `chown`, `ls -l`

10. **Find Files by Permissions**:
    - Write a script that finds all files in the `/home` directory that are executable by the owner but not by others.

    - **Commands covered**: `find`

### **System Information and Monitoring**

11. **Disk Usage**:
    - Write a script that displays the disk usage of the `/home` directory in a human-readable format.

    - **Commands covered**: `du`, `df`

12. **System Uptime**:
    - Write a script that displays how long the system has been running.

    - **Commands covered**: `uptime`

13. **Memory Usage**:
    - Write a script that displays the current memory usage of the system.

    - **Commands covered**: `free`

14. **Check Running Processes**:
    - Write a script that displays a list of all currently running processes along with their CPU and memory usage.

    - **Commands covered**: `ps`, `top`

### **Networking**

15. **Check Network Connectivity**:
    - Write a script that pings `google.com` five times and displays whether the host is reachable.

    - **Commands covered**: `ping`

16. **Display Active Network Interfaces**:
    - Write a script that lists all active network interfaces on the system.

    - **Commands covered**: `ifconfig`, `ip`

17. **Check Open Ports**:
    - Write a script that checks for all open ports on the system and displays the results.

    - **Commands covered**: `netstat`, `ss`

### **User and Group Management**

18. **Create a New User**:
    - Write a script that creates a new user named `testuser` with a home directory and sets a password for the user.

    - **Commands covered**: `useradd`, `passwd`

19. **Add User to Group**:
    - Write a script that adds `testuser` to a group named `developers` and then verifies the group membership.

    - **Commands covered**: `usermod`, `groups`

20. **Display User Information**:
    - Write a script that displays detailed information about the current user.

    - **Commands covered**: `id`, `whoami`

### **Process Management**

21. **Start and Kill Processes**:
    - Write a script that starts a background process that runs `sleep 60`, lists all running processes, and then kills the `sleep` process.

    - **Commands covered**: `&`, `ps`, `kill`

22. **Monitor CPU Usage of a Process**:
    - Write a script that monitors the CPU usage of a process with a specific PID (provided as an argument to the script) every 5 seconds.

    - **Commands covered**: `top`, `ps`

23. **Automate a Task with `cron`**:
    - Write a script that sets up a `cron` job to run a backup script every day at midnight.

    - **Commands covered**: `crontab`, `cron`

### **Archiving and Compression**

24. **Create a Compressed Archive**:
    - Write a script that creates a tarball (`.tar.gz`) of a directory named `my_project` and saves it as `my_project_backup.tar.gz`.

    - **Commands covered**: `tar`, `gzip`

25. **Extract a Compressed Archive**:
    - Write a script that extracts the contents of `my_project_backup.tar.gz` to a new directory named `restored_project`.

    - **Commands covered**: `tar`, `gunzip`

### **Package Management**

26. **Install a Package**:
    - Write a script that checks if `curl` is installed on the system. If it isn’t, the script should install `curl` using the appropriate package manager.

    - **Commands covered**: `dpkg`, `apt-get`, `yum`, `rpm`

27. **Update System Packages**:
    - Write a script that updates all installed packages on the system to their latest versions.

    - **Commands covered**: `apt-get`, `yum`, `dnf`

28. **Remove a Package**:
    - Write a script that uninstalls the `apache2` package and removes its configuration files.

    - **Commands covered**: `apt-get`, `yum`, `rpm`

### **Miscellaneous**

29. **Create a Soft Link**:
    - Write a script that creates a soft link named `link_to_notes` pointing to the `notes.txt` file.

    - **Commands covered**: `ln -s`

30. **Search for a Pattern in Files**:
    - Write a script that searches for the word "TODO" in all `.sh` files in the current directory and lists the filenames that contain this word.

    - **Commands covered**: `grep`, `find`

These questions cover the foundational commands that are essential for working in a Linux environment. Practicing these will help you become proficient in writing basic shell scripts and managing a Linux system effectively.
